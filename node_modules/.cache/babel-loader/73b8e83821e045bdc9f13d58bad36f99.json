{"ast":null,"code":"// ----- Action Creators -----\nimport axios from 'axios'; //@ts-check\n\n/**\n * Sleep function. Must be called inside async function.\n * @param {number} ms Time in milliseconds.\n * @returns {Promise} Return promise to use await.\n */\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n/**\n * Get the current authenticated user.\n */\n\n\nexport const fetchUser = () => async dispatch => {\n  for (let i = 0; i < 5; i++) {\n    try {\n      /**@type {{data: {name: string, email: string, photo: string, asd: string}}} */\n      const res = await axios.get('/user');\n      dispatch({\n        type: 'FETCH_USER',\n        payload: res.data\n      });\n      return;\n    } catch (err) {\n      console.log(err.response);\n      await sleep(3000);\n    }\n  }\n};\n/**\n * Get the list of all devices for an user.\n */\n\nexport const fetchDevices = () => async dispatch => {\n  for (let i = 0; i < 5; i++) {\n    try {\n      /** @type {{data: {devices: array}}} */\n      const res = await axios.get('/devices');\n      dispatch({\n        type: 'LIST_DEVICES',\n        payload: res.data.devices\n      });\n      return;\n    } catch (err) {\n      console.log(err.response);\n      await sleep(1000);\n    }\n  }\n};\n/**\n * Register a new device.\n * @param {string} deviceId The id of the device.\n */\n\nexport const registerDevice = deviceId => async dispatch => {\n  try {\n    /** @type {{status: number}} */\n    const res = await axios.post('/devices', {\n      deviceId\n    });\n\n    if (res.status === 201) {\n      dispatch({\n        type: 'REGISTER_DEVICE'\n      });\n      dispatch(fetchDevices());\n    }\n  } catch (err) {\n    console.log(err.response);\n  }\n};\n/**\n * Update a device configuration.\n * @param {{config: {duty: number, state: boolean, timerOn: number, timeOff: number, timerState: boolean, alias: string, }}} device Device config blob.\n * @param {number} index The index of the device in the list.\n */\n\nexport const updateDeviceConfig = (device, index) => async dispatch => {\n  try {\n    // Add await here to wait for the response to update the state of the switch component.\n    await axios.put(`/devices/${device.deviceId}`, {\n      device\n    });\n    dispatch({\n      type: 'UPDATE_DEVICE',\n      payload: {\n        device,\n        index\n      }\n    });\n  } catch (err) {\n    console.log('Error actualizando dispositivo:', err.response);\n  }\n};\n/**\n * Delete a device from the dashboard.\n * @param {{deviceId: string}} device The device object\n * @param {number} index Device index in the list.\n */\n\nexport const deleteDevice = (device, index) => async dispatch => {\n  try {\n    await axios.delete(`/devices/${device.deviceId}`);\n    dispatch(fetchDevices());\n  } catch (err) {\n    console.log(err);\n  }\n};\n/**\n * Get the device state.\n * @param {{deviceId: string}} device The device object\n * @param {number} index Device index in the list.\n */\n\nexport const getDeviceState = (device, index) => async dispatch => {\n  while (true) {\n    console.log('Getting device state...');\n\n    try {\n      const res = await axios.get(`/devices/${device.deviceId}`);\n      const state = res.data.state;\n      dispatch({\n        type: 'GET_STATE',\n        payload: {\n          state,\n          index\n        }\n      });\n    } catch (err) {\n      console.log(err);\n    }\n\n    await sleep(5000);\n  }\n};\n/**\n * Change alias ID\n * @param {string} deviceId The id of the device.\n */\n\nexport const changeAlias = device => async dispatch => {\n  try {\n    await axios.post(`/devices/${device.deviceId}`, {\n      device\n    });\n    dispatch({\n      type: 'UPDATE_ALIAS'\n    });\n  } catch (err) {\n    console.log('Error actualizando alias:', err.response);\n  }\n};\n/**\n * Change alias ID\n * @param {string} inputForm image form\n */\n\nexport const uploadImage = formdata => async dispatch => {\n  try {\n    const res = await axios({\n      method: 'post',\n      url: '/add',\n      data: formdata,\n      config: {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }\n    });\n    dispatch({\n      type: 'UPLOAD_IMAGE'\n    });\n    return res.data.imageURL;\n  } catch (err) {\n    console.log('Error upload image:', err.response);\n  }\n}; // /**\n//  * Predict with images\n//  * @param {string} Image The path of the images to predict\n//  */\n// export const predictWithImage = (imagePath) => async dispatch => {\n// \ttry {\n// \t\tawait axios.post('/predict', {imagePath});\n// \t\tdispatch({type: 'PREDICT_IMAGE'});\n// \t} catch (err) {\n// \t\tconsole.log('Error predict image', err.response);\n// \t}\n// };\n\n/**\n * Get the data history of devices\n * @param {string} deviceId The id of the device.\n */\n\nconst URL_H = 'https://us-central1-ioled-dev-262215.cloudfunctions.net/historyApi';\n/*\n * day: 1, week: 2, month: 3\n *\n */\n\nexport const getHistory = async (device, time) => {\n  try {\n    var res = 1;\n\n    if (time === 1) {\n      res = await axios.get(`${URL_H}/day/${device.deviceId}`);\n    }\n\n    if (time === 2) {\n      res = await axios.get(`${URL_H}/week/${device.deviceId}`);\n    }\n\n    if (time === 3) {\n      res = await axios.get(`${URL_H}/month/${device.deviceId}`);\n    }\n\n    return res.data.data;\n  } catch (err) {\n    console.log(err.response);\n    await sleep(3000);\n  }\n};\nexport const changeMenu = menu => async dispatch => {\n  dispatch({\n    type: 'CHANGE_MENU',\n    payload: {\n      menu\n    }\n  });\n  return;\n};","map":{"version":3,"sources":["/home/dixon/iOLED/front-app-web-iOLED-react/src/actions/index.js"],"names":["axios","sleep","ms","Promise","resolve","setTimeout","fetchUser","dispatch","i","res","get","type","payload","data","err","console","log","response","fetchDevices","devices","registerDevice","deviceId","post","status","updateDeviceConfig","device","index","put","deleteDevice","delete","getDeviceState","state","changeAlias","uploadImage","formdata","method","url","config","headers","imageURL","URL_H","getHistory","time","changeMenu","menu"],"mappings":"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","sourcesContent":["// ----- Action Creators -----\nimport axios from 'axios';\n//@ts-check\n\n/**\n * Sleep function. Must be called inside async function.\n * @param {number} ms Time in milliseconds.\n * @returns {Promise} Return promise to use await.\n */\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/**\n * Get the current authenticated user.\n */\nexport const fetchUser = () => async (dispatch) => {\n  for (let i = 0; i < 5; i++) {\n    try {\n      /**@type {{data: {name: string, email: string, photo: string, asd: string}}} */\n      const res = await axios.get('/user');\n      dispatch({type: 'FETCH_USER', payload: res.data});\n      return;\n    } catch (err) {\n      console.log(err.response);\n      await sleep(3000);\n    }\n  }\n};\n\n/**\n * Get the list of all devices for an user.\n */\nexport const fetchDevices = () => async (dispatch) => {\n  for (let i = 0; i < 5; i++) {\n    try {\n      /** @type {{data: {devices: array}}} */\n      const res = await axios.get('/devices');\n      dispatch({type: 'LIST_DEVICES', payload: res.data.devices});\n      return;\n    } catch (err) {\n      console.log(err.response);\n      await sleep(1000);\n    }\n  }\n};\n\n/**\n * Register a new device.\n * @param {string} deviceId The id of the device.\n */\nexport const registerDevice = (deviceId) => async (dispatch) => {\n  try {\n    /** @type {{status: number}} */\n    const res = await axios.post('/devices', {deviceId});\n    if (res.status === 201) {\n      dispatch({type: 'REGISTER_DEVICE'});\n      dispatch(fetchDevices());\n    }\n  } catch (err) {\n    console.log(err.response);\n  }\n};\n\n/**\n * Update a device configuration.\n * @param {{config: {duty: number, state: boolean, timerOn: number, timeOff: number, timerState: boolean, alias: string, }}} device Device config blob.\n * @param {number} index The index of the device in the list.\n */\nexport const updateDeviceConfig = (device, index) => async (dispatch) => {\n  try {\n    // Add await here to wait for the response to update the state of the switch component.\n    await axios.put(`/devices/${device.deviceId}`, {device});\n    dispatch({type: 'UPDATE_DEVICE', payload: {device, index}});\n  } catch (err) {\n    console.log('Error actualizando dispositivo:', err.response);\n  }\n};\n\n/**\n * Delete a device from the dashboard.\n * @param {{deviceId: string}} device The device object\n * @param {number} index Device index in the list.\n */\nexport const deleteDevice = (device, index) => async (dispatch) => {\n  try {\n    await axios.delete(`/devices/${device.deviceId}`);\n    dispatch(fetchDevices());\n  } catch (err) {\n    console.log(err);\n  }\n};\n\n/**\n * Get the device state.\n * @param {{deviceId: string}} device The device object\n * @param {number} index Device index in the list.\n */\nexport const getDeviceState = (device, index) => async (dispatch) => {\n  while (true) {\n    console.log('Getting device state...');\n\n    try {\n      const res = await axios.get(`/devices/${device.deviceId}`);\n      const {state} = res.data;\n      dispatch({type: 'GET_STATE', payload: {state, index}});\n    } catch (err) {\n      console.log(err);\n    }\n    await sleep(5000);\n  }\n};\n\n/**\n * Change alias ID\n * @param {string} deviceId The id of the device.\n */\nexport const changeAlias = (device) => async (dispatch) => {\n  try {\n    await axios.post(`/devices/${device.deviceId}`, {device});\n    dispatch({type: 'UPDATE_ALIAS'});\n  } catch (err) {\n    console.log('Error actualizando alias:', err.response);\n  }\n};\n\n/**\n * Change alias ID\n * @param {string} inputForm image form\n */\nexport const uploadImage = (formdata) => async (dispatch) => {\n  try {\n    const res = await axios({\n      method: 'post',\n      url: '/add',\n      data: formdata,\n      config: {headers: {'Content-Type': 'multipart/form-data'}},\n    });\n    dispatch({type: 'UPLOAD_IMAGE'});\n    return res.data.imageURL;\n  } catch (err) {\n    console.log('Error upload image:', err.response);\n  }\n};\n\n// /**\n//  * Predict with images\n//  * @param {string} Image The path of the images to predict\n//  */\n// export const predictWithImage = (imagePath) => async dispatch => {\n// \ttry {\n// \t\tawait axios.post('/predict', {imagePath});\n// \t\tdispatch({type: 'PREDICT_IMAGE'});\n// \t} catch (err) {\n// \t\tconsole.log('Error predict image', err.response);\n// \t}\n// };\n\n/**\n * Get the data history of devices\n * @param {string} deviceId The id of the device.\n */\nconst URL_H = 'https://us-central1-ioled-dev-262215.cloudfunctions.net/historyApi';\n\n/*\n * day: 1, week: 2, month: 3\n *\n */\n\nexport const getHistory = async (device, time) => {\n  try {\n    var res = 1;\n    if (time === 1) {\n      res = await axios.get(`${URL_H}/day/${device.deviceId}`);\n    }\n    if (time === 2) {\n      res = await axios.get(`${URL_H}/week/${device.deviceId}`);\n    }\n    if (time === 3) {\n      res = await axios.get(`${URL_H}/month/${device.deviceId}`);\n    }\n    return res.data.data;\n  } catch (err) {\n    console.log(err.response);\n    await sleep(3000);\n  }\n};\n\nexport const changeMenu = (menu) => async (dispatch) => {\n  dispatch({type: 'CHANGE_MENU', payload: {menu}});\n  return;\n};\n"]},"metadata":{},"sourceType":"module"}